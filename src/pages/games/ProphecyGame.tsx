import { useState, useEffect } from 'react'
import { Link } from 'react-router-dom'
import Icon from '@/components/ui/icon'
import InteractiveBackground from '@/components/InteractiveBackground'
import RandomMascot from '@/components/RandomMascot'
import { useSoundEffects } from '@/components/SoundEffects'

interface Prophecy {
  id: number
  riddle: string
  options: string[]
  correct: number
  hint: string
  mascotReaction: string
}

const ProphecyGame = () => {
  const [currentProphecy, setCurrentProphecy] = useState(0)
  const [score, setScore] = useState(0)
  const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null)
  const [showResult, setShowResult] = useState(false)
  const [gameComplete, setGameComplete] = useState(false)
  const [mascotTrigger, setMascotTrigger] = useState(false)
  const [showHint, setShowHint] = useState(false)
  const sounds = useSoundEffects()

  const prophecies: Prophecy[] = [
    {
      id: 1,
      riddle: "üçé –ß—Ç–æ –ø–∞–¥–∞–µ—Ç —Å –¥–µ—Ä–µ–≤–∞ –∑–Ω–∞–Ω–∏–π, –Ω–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±–æ–ª–∏—Ç?",
      options: ["–õ–∏—Å—Ç—å—è –º—É–¥—Ä–æ—Å—Ç–∏", "–Ø–±–ª–æ–∫–∏ –ø—Ä–æ—Å–≤–µ—Ç–ª–µ–Ω–∏—è", "–ú–µ–º—ã –∏—Å—Ç–∏–Ω—ã", "–°–ª—ë–∑—ã —Ä–∞–¥–æ—Å—Ç–∏"],
      correct: 1,
      hint: "Ryuk –ª—é–±–∏—Ç –∏—Ö –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –Ω–∞ —Å–≤–µ—Ç–µ! üòà",
      mascotReaction: "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –Ø–±–ª–æ–∫–∏ ‚Äî —ç—Ç–æ —Å–∏–ª–∞! üçé‚ú®"
    },
    {
      id: 2,
      riddle: "üìù –ß—Ç–æ –ø–∏—à–µ—Ç—Å—è —á–µ—Ä–Ω–∏–ª–∞–º–∏ —Å—É–¥—å–±—ã, –Ω–æ —á–∏—Ç–∞–µ—Ç—Å—è —Å–º–µ—Ö–æ–º?",
      options: ["–ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –±–∞–Ω–∫–∞", "–ú–µ–º–Ω—ã–µ –ø—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–∞", "–®—É—Ç–∫–∏ –º–∞—Å–∫–æ—Ç–∞", "–í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã"],
      correct: 3,
      hint: "–í –ë–∞–Ω–∫–µ –°—É–¥—å–±—ã –≤—Å—ë ‚Äî —ç—Ç–æ –ø–æ–≤–æ–¥ –¥–ª—è —É–ª—ã–±–∫–∏! üé≠",
      mascotReaction: "–ì–µ–Ω–∏–∞–ª—å–Ω–æ! –¢—ã –ø–æ–Ω—è–ª —Å—É—Ç—å –Ω–∞—à–µ–≥–æ –±–∞–Ω–∫–∞! üòÑ"
    },
    {
      id: 3,
      riddle: "üíÄ –ß—Ç–æ —Å—Ç—Ä–∞—à–Ω–µ–µ —Å–º–µ—Ä—Ç–∏, –Ω–æ –≤–µ—Å–µ–ª–µ–µ –∂–∏–∑–Ω–∏?",
      options: ["–≠–∫–∑–∞–º–µ–Ω—ã", "–ú–µ–º—ã –æ Death Note", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–ó–∞–±—ã—Ç—å –ø–∞—Ä–æ–ª—å"],
      correct: 1,
      hint: "Light Yagami –±—ã–ª –±—ã –Ω–µ –ø—Ä–æ—Ç–∏–≤ –ø–æ—Å–º–µ—è—Ç—å—Å—è! üíÄüòÇ",
      mascotReaction: "–•–∞-—Ö–∞! –ú–µ–º—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±–µ—Å—Å–º–µ—Ä—Ç–Ω—ã! üé™"
    },
    {
      id: 4,
      riddle: "üåü –ß—Ç–æ —Å–≤–µ—Ç–∏—Ç—Å—è –Ω–µ–æ–Ω–æ–º, –Ω–æ —Å–æ–≥—Ä–µ–≤–∞–µ—Ç –¥—É—à—É?",
      options: ["–†–µ–∫–ª–∞–º–∞", "–ù–∞—à–∏ –∫–Ω–æ–ø–∫–∏", "–î—Ä—É–∂–±–∞ –∏ –≤–µ—Å–µ–ª—å–µ", "RGB –ø–æ–¥—Å–≤–µ—Ç–∫–∞"],
      correct: 2,
      hint: "–°–∞–º–æ–µ —è—Ä–∫–æ–µ ‚Äî —ç—Ç–æ –Ω–µ –≤—Å–µ–≥–¥–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ... ‚ù§Ô∏è",
      mascotReaction: "–¢–æ—á–Ω–æ! –í–µ—Å–µ–ª—å–µ ‚Äî –ª—É—á—à–∏–π —Å–≤–µ—Ç –≤ —Ç–µ–º–Ω–æ—Ç–µ! üåà"
    },
    {
      id: 5,
      riddle: "üé≠ –ö—Ç–æ –Ω–æ—Å–∏—Ç –º–∞—Å–∫—É —É–ª—ã–±–∫–∏, –Ω–æ –≥–æ–≤–æ—Ä–∏—Ç –ø—Ä–∞–≤–¥—É?",
      options: ["–ö–ª–æ—É–Ω", "–ü–æ–ª–∏—Ç–∏–∫", "–ú–µ–º–Ω—ã–π –º–∞—Å–∫–æ—Ç", "–ò–Ω—Ç—Ä–æ–≤–µ—Ä—Ç –Ω–∞ –≤–µ—á–µ—Ä–∏–Ω–∫–µ"],
      correct: 2,
      hint: "–Ø –≤—Å–µ–≥–¥–∞ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –Ω–∞–ø–æ–º–Ω–∏—Ç—å: —ç—Ç–æ –≤—Å—ë —à—É—Ç–∫–∞! üò∏",
      mascotReaction: "–í–µ—Ä–Ω–æ! –Ø ‚Äî —Ç–≤–æ–π –≥–∏–¥ –≤ –º–∏—Ä–µ –≤–µ—Å–µ–ª—å—è! üé™‚ú®"
    }
  ]

  const handleAnswerSelect = (answerIndex: number) => {
    if (showResult) return
    
    setSelectedAnswer(answerIndex)
    setShowResult(true)
    
    if (answerIndex === prophecies[currentProphecy].correct) {
      setScore(prev => prev + 20)
      sounds.success()
      setMascotTrigger(true)
    } else {
      sounds.click()
    }
  }

  const handleNextProphecy = () => {
    if (currentProphecy < prophecies.length - 1) {
      setCurrentProphecy(prev => prev + 1)
      setSelectedAnswer(null)
      setShowResult(false)
      setShowHint(false)
    } else {
      setGameComplete(true)
      sounds.magic()
    }
  }

  const handleRestart = () => {
    setCurrentProphecy(0)
    setScore(0)
    setSelectedAnswer(null)
    setShowResult(false)
    setGameComplete(false)
    setShowHint(false)
  }

  const getScoreMessage = () => {
    const percentage = (score / (prophecies.length * 20)) * 100
    if (percentage === 100) return "üèÜ –ú–∞—Å—Ç–µ—Ä –ø—Ä–æ—Ä–æ—á–µ—Å—Ç–≤! –¢—ã –ø–æ—Å—Ç–∏–≥ –≤—Å–µ —Ç–∞–π–Ω—ã!"
    if (percentage >= 80) return "üåü –û—Ç–ª–∏—á–Ω–æ! –¢—ã –ø–æ—á—Ç–∏ –≤—Å–µ–≤–∏–¥—è—â–∏–π!"
    if (percentage >= 60) return "‚ú® –•–æ—Ä–æ—à–æ! –¢–≤–æ—è –º—É–¥—Ä–æ—Å—Ç—å —Ä–∞—Å—Ç—ë—Ç!"
    if (percentage >= 40) return "üé≠ –ù–µ–ø–ª–æ—Ö–æ! –ï—â—ë –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–∞–∫—Ç–∏–∫–∏!"
    return "üòÑ –ì–ª–∞–≤–Ω–æ–µ ‚Äî –≤–µ—Å–µ–ª—å–µ! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!"
  }

  const currentQ = prophecies[currentProphecy]

  if (gameComplete) {
    return (
      <div className="min-h-screen pt-20 pb-16 px-4">
        <InteractiveBackground />
        
        <div className="max-w-2xl mx-auto text-center">
          <div className="bg-death-gray/20 backdrop-blur-sm border border-neon-purple/30 rounded-2xl p-12">
            <div className="w-24 h-24 bg-gradient-to-br from-neon-purple to-neon-pink rounded-full flex items-center justify-center mx-auto mb-8">
              <Icon name="Trophy" size={48} className="text-white" />
            </div>
            
            <h1 className="text-4xl font-bold text-white mb-4">
              –ü—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–∞ —Ä–∞–∑–≥–∞–¥–∞–Ω—ã!
            </h1>
            
            <p className="text-2xl text-neon-purple mb-6">
              –¢–≤–æ–π —Å—á—ë—Ç: {score} –∏–∑ {prophecies.length * 20}
            </p>
            
            <p className="text-xl text-gray-300 mb-8">
              {getScoreMessage()}
            </p>
            
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <button
                onClick={handleRestart}
                className="px-8 py-3 bg-gradient-to-r from-neon-purple to-neon-pink rounded-lg font-semibold text-white hover:scale-105 transition-transform"
              >
                –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞
              </button>
              <Link
                to="/games"
                className="px-8 py-3 border border-neon-purple/50 rounded-lg font-semibold text-white hover:bg-neon-purple/10 transition-colors"
              >
                –î—Ä—É–≥–∏–µ –∏–≥—Ä—ã
              </Link>
            </div>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen pt-20 pb-16 px-4">
      <InteractiveBackground />
      
      <div className="max-w-3xl mx-auto">
        {/* Header */}
        <div className="text-center mb-12">
          <Link 
            to="/games" 
            className="inline-flex items-center space-x-2 text-neon-purple hover:text-neon-pink transition-colors mb-6"
          >
            <Icon name="ArrowLeft" size={20} />
            <span>–ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º</span>
          </Link>
          
          <h1 className="text-4xl font-bold text-white mb-4">
            –£–≥–∞–¥–∞–π –ø—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–æ!
          </h1>
          
          <div className="flex items-center justify-center space-x-8 text-sm">
            <div className="flex items-center space-x-2">
              <Icon name="Brain" size={16} className="text-neon-purple" />
              <span className="text-white">–í–æ–ø—Ä–æ—Å {currentProphecy + 1} –∏–∑ {prophecies.length}</span>
            </div>
            <div className="flex items-center space-x-2">
              <Icon name="Star" size={16} className="text-neon-pink" />
              <span className="text-white">–°—á—ë—Ç: {score}</span>
            </div>
          </div>
        </div>

        {/* Question Card */}
        <div className="bg-death-gray/20 backdrop-blur-sm border border-neon-purple/30 rounded-2xl p-8 mb-8">
          <div className="text-center mb-8">
            <h2 className="text-2xl font-bold text-white mb-4">
              {currentQ.riddle}
            </h2>
            
            {!showHint && !showResult && (
              <button
                onClick={() => setShowHint(true)}
                className="text-neon-purple hover:text-neon-pink transition-colors flex items-center space-x-2 mx-auto"
              >
                <Icon name="HelpCircle" size={20} />
                <span>–ù—É–∂–Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞?</span>
              </button>
            )}
            
            {showHint && (
              <div className="mt-4 p-4 bg-neon-purple/10 border border-neon-purple/30 rounded-lg">
                <p className="text-neon-purple">{currentQ.hint}</p>
              </div>
            )}
          </div>

          {/* Answer Options */}
          <div className="grid gap-4 mb-8">
            {currentQ.options.map((option, index) => (
              <button
                key={index}
                onClick={() => handleAnswerSelect(index)}
                disabled={showResult}
                className={`p-4 rounded-lg text-left transition-all duration-300 ${
                  selectedAnswer === index
                    ? index === currentQ.correct
                      ? 'bg-green-500/20 border-green-500 text-green-400'
                      : 'bg-red-500/20 border-red-500 text-red-400'
                    : showResult && index === currentQ.correct
                    ? 'bg-green-500/20 border-green-500 text-green-400'
                    : 'bg-gray-700/30 border-gray-600 text-white hover:border-neon-purple/50 hover:bg-neon-purple/10'
                } border`}
              >
                <div className="flex items-center space-x-3">
                  <div className={`w-6 h-6 rounded-full border-2 flex items-center justify-center ${
                    selectedAnswer === index ? 'border-current' : 'border-gray-500'
                  }`}>
                    {selectedAnswer === index && (
                      <div className="w-3 h-3 rounded-full bg-current" />
                    )}
                  </div>
                  <span className="font-medium">{option}</span>
                </div>
              </button>
            ))}
          </div>

          {/* Result & Next Button */}
          {showResult && (
            <div className="text-center">
              <div className={`p-4 rounded-lg mb-6 ${
                selectedAnswer === currentQ.correct
                  ? 'bg-green-500/10 border border-green-500/30'
                  : 'bg-red-500/10 border border-red-500/30'
              }`}>
                <p className={`text-lg font-medium ${
                  selectedAnswer === currentQ.correct ? 'text-green-400' : 'text-red-400'
                }`}>
                  {selectedAnswer === currentQ.correct 
                    ? currentQ.mascotReaction 
                    : '–ù–µ —Å–æ–≤—Å–µ–º —Ç–∞–∫, –Ω–æ —ç—Ç–æ –Ω–µ –±–µ–¥–∞! –£—á–∏–º—Å—è –Ω–∞ –æ—à–∏–±–∫–∞—Ö! üòä'
                  }
                </p>
              </div>
              
              <button
                onClick={handleNextProphecy}
                className="px-8 py-3 bg-gradient-to-r from-neon-purple to-neon-pink rounded-lg font-semibold text-white hover:scale-105 transition-transform"
              >
                {currentProphecy < prophecies.length - 1 ? '–°–ª–µ–¥—É—é—â–µ–µ –ø—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–æ' : '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É'}
              </button>
            </div>
          )}
        </div>
      </div>

      <RandomMascot 
        trigger={mascotTrigger}
        onComplete={() => setMascotTrigger(false)}
      />
    </div>
  )
}

export default ProphecyGame